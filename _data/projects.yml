# Project template

- name: Dashboard
  github: phyunsj
  description: | # this will include new lines to allow paragraphs
    [Design Dashboard with 2D game framework](https://github.com/phyunsj/iot-dashboard-design-with-love2d)  <mark>LÖVE</mark> <mark>love2d</mark> <mark>lua</mark>  <mark>freeboard</mark> <mark>iOS</mark> <mark>Fedberry</mark> <mark>Pi 3B</mark>

    [Dash python framework to design IoT Dashboard](https://github.com/phyunsj/iot-dashboard-design-with-dash)  <mark>Dash</mark> <mark>Node-RED</mark> 

    [Login, Session Management](https://github.com/phyunsj/node-red-dashboard-login) <mark>node-red-dashboard</mark> <mark>ui-control</mark> 

    [Dashboard design for the embedded system](https://github.com/phyunsj/embedded-freeboard-dashboard) <mark>Node-RED</mark> <mark>freeboard.io</mark> <mark>Crow webserver</mark>

    [Porting Metricio Design](https://github.com/phyunsj/react-native-metricio) <mark>react-native</mark> <mark>Dashing</mark> <mark>Metricio</mark>

    [Alert Dashboard](https://github.com/phyunsj/node-red-custom-dashboard-map-page) <mark>node-red:ui-template</mark> <mark>google maps</mark>  

    [System Monitoring Dashboard](https://github.com/phyunsj/node-red-custom-dashboard-system-page) <mark>node-red-contrib-os</mark> <mark>ui-template</mark> <mark>websocket</mark>

- name: Internet of Things
  github: phyunsj
  description: | # this will include new lines to allow paragraphs
    [MQTT message routing using user-defined rules](https://github.com/phyunsj/mqtt-rule-engine) <mark>MQTT</mark> <mark>mosquitto broker</mark> <mark>lua</mark>  <mark>sqlite</mark>
    
    [Collect Sequence of Events(SOE) and store in Google Sheets for later use](https://github.com/phyunsj/ifttt-soe-logger)  <mark>IFTTT</mark>  <mark>iot-simulator</mark> <mark>webhooks</mark>

    [Create your custom thing in flows and send events](https://github.com/phyunsj/iot-device-simulator-2-stringify) <mark>stringify</mark> <mark>iot-simulator</mark>  <mark>Zeroconf-bonjour</mark>  <mark>MQTT</mark> <mark>websocket</mark> 

    [A custom node to simulate user-defined IoT data + cloud MQTT](https://github.com/phyunsj/iot-device-simulator-1-mqtt) <mark>node-red-dshboard</mark> <mark>iot-simulator</mark> <mark>MQTT</mark> <mark>websocket</mark>

    [Thermostat Control over IM](https://github.com/phyunsj/node-red-contrib-ecolect-example) <mark>react-native</mark> <mark>ecolect</mark> <mark>websocket</mark> <mark>nest thermostat</mark>

- name: API Design + Code Generator
  github: phyunsj
  description: | # this will include new lines to allow paragraphs

    [XDR as an API Contract](https://github.com/phyunsj/api-contract)  <mark>IDL</mark>  <mark>rpcgen</mark> 

    [XDR over ØMQ](https://github.com/phyunsj/xdr-data-serialization)  <mark>IDL</mark>  <mark>rpcgen</mark> <mark>xdrmem</mark> <mark>ZeroMQ</mark> 

    (1) [Simple Text Scanner with SLRE](https://github.com/phyunsj/simple-configuration-setter-getter-SLRE-sqlite) (2) [C++ class representing Hadoop Configuration Parameters](https://github.com/phyunsj/simple-configuration-setter-getter-SLRE-sqlite/tree/master/example)  <mark>SLRE</mark> <mark>sqlite</mark> <mark>Excel</mark> 

    [Angular Custom Validator Generation with Template-Driven Form](https://github.com/phyunsj/angular-custom-validator-generation)  <mark>angular</mark> <mark>template-form</mark> <mark>validator directive</mark> <mark>Excel</mark> 

    [Angular 5 http Service Component Generation with the table](https://github.com/phyunsj/angular-http-sql-service-component-generation) <mark>angular</mark> <mark>angular service</mark>  <mark>sqlite</mark> <mark>JSON</mark> <mark>Excel</mark> 

    [Lua-to-C wrapper generation based on .h](https://github.com/phyunsj/lua-to-c) <mark>pycparser</mark> <mark>AST</mark>  <mark>lua</mark>

    [RPC Code Generation](https://github.com/phyunsj/oncrpc-api-design) <mark>pycparser</mark> <mark>AST</mark>  <mark>ONC/RPC</mark> <mark>IDL</mark>  <mark>rpcgen</mark> 

    [JSON-RPC EGI handler to process RPC POST Data, Excel as API specification](https://github.com/phyunsj/jsonrpc-embedded-cgi-handler) <mark>appWeb 2.x webserver</mark> <mark>JSON-RPC</mark> <mark>Excel</mark> 

    [embedded gateway interface (EGI) handler to process JSON POST Data](https://github.com/phyunsj/embedded-webapp-jsonparser) <mark>appWeb 2.x webserver</mark> <mark>JSON</mark> <mark>jsoncpp</mark> 

- name: Node-RED 
  github: phyunsj
  description: | # this will include new lines to allow paragraphs

    **Experimenting with Cloud IoT Platforms**

    [ThingWrox](https://github.com/phyunsj/node-red-to-access-thingwrox)

    [flespi MQTT Broker](https://github.com/phyunsj/iot-device-simulator-1-mqtt)

    [Blynk + cloudBit](https://github.com/phyunsj/blynk-cloudbit)

    [Blynk](https://github.com/phyunsj/blynk-node-red)

    [dweet.io](https://github.com/phyunsj/dweet.io-node-red)

    [Datadog](https://github.com/phyunsj/datadog-node-red)

    [IFTTT](https://github.com/phyunsj/ifttt-soe-logger)

    [Stringify](https://github.com/phyunsj/iot-device-simulator-2-stringify)

    **Custom Nodes**

    [WebAssembly Native Node](https://github.com/phyunsj/node-red-native-addon) <mark>webassembly</mark> 

    [Blocking Queue Node](https://github.com/phyunsj/node-red-simple-blocking-queue) 

    [D3 Line Chart Custome Widget Node](https://github.com/phyunsj/node-red-dashboard-custom-widget) <mark>D3</mark> 
    
    [ZeroMQ Node](https://github.com/phyunsj/node-red-contrib-zeromq-node) <mark>ØMQ</mark>

    [IoT Device Simulator](https://github.com/phyunsj/iot-device-simulator-1-mqtt) 

- name: Automation
  github: phyunsj
  description: | # this will include new lines to allow paragraphs
    [Node-RED flow deployment : pushes tasks via SSH](https://github.com/phyunsj/automate-it)  <mark>ansible</mark> <mark>ssh</mark> <mark>Pi 3B</mark>

    [control interactive applications such as SSH, SCP or SFTP - python](https://github.com/phyunsj/automate-it/tree/master/2-flow-deploy-py)  <mark>pexpect</mark> <mark>paramiko</mark> <mark>Pi 3B</mark>

- name: Documentation
  github: phyunsj
  description: | # this will include new lines to allow paragraphs
    [Gravizo Graph, Diagram Example](https://github.com/phyunsj/embedding-gravizo-graph)  <mark>gravizo</mark>

    [Quick Start Guide to Build Desktop Application with Electron + Angular](https://github.com/phyunsj/electron-angular-quick-start-guide)  <mark>electron</mark> <mark>electron-packager</mark> <mark>angular</mark> 
